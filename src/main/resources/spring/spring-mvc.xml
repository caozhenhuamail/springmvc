<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 映射器 这是spring3.1以后提供的 -->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />-->

    <!-- 适配器 这是spring3.1以后提供的 -->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" />-->

    <!--
        切记，这不是必需的！除非你把注解的 Controller 一个个的注册到容器中。
        相信大家还是喜欢用 context:compnent-scan 吧。
        不要认为在 Spring MVC 中才提到 context:component-scan，就认为它只能扫描 @Controller。
        component-scan 默认扫描的注解类型是 @Component，不过，
        在 @Component 语义基础上细化后的 @Repository, @Service 和 @Controller 也同样可以获得 component-scan.
    -->
    <context:component-scan base-package="com.springapp.mvc"/>
    <!--
       <mvc:annotation-driven /> 会做以下几件事：
        1,向 spring 容器中注册 DefaultAnnotationHandlerMapping。
        2,向 spring 容器中注册 AnnotationMethodHandlerAdapter。
        3,配置一些 messageconverter。
        4,解决了 @Controller 注解的使用前提配置，
        即 HandlerMapping 能够知道谁来处理请求数据绑定支持，@NumberFormatannotation支持，
        @DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。
    -->

    <mvc:annotation-driven  conversion-service="conversionService" validator="validator" >
        <!--<mvc:message-converters>-->
            <!--<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />-->
        <!--</mvc:message-converters>-->
    </mvc:annotation-driven>

    <!-- 拦截器设置， /**表示拦截所有url及其子url. /* 表示不拦截子url. -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.springapp.mvc.interseptor.LoginInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.springapp.mvc.interseptor.HandlerInterceptor1"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.springapp.mvc.interseptor.HandlerInterceptor2"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 该配置是@ResponseBody @ResquestBody 生效. json格式转换. -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJackson2HttpMessageConverter" />
            </list>
        </property>
    </bean>
    <bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>text/json;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- <context:annotation-config/>隐式地向Spring容器中注册AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 及 equiredAnnotationBeanPostProcessor 这 4 个 BeanPostProcessor。 在配置文件中使用<context:annotationconfig/>之前，必须在 <beans> 元素中声明 context 命名空间<context:component-scan/>。
是对包进行扫描，实现注释驱动Bean定义，同时将bean自动注入容器中使用。即解决了@Controller标识的类的bean的注入和使用。-->
    <!--<context:annotation-config/>-->

    <!-- 视图解析器 -->
    <!-- freemarker的配置 -->
    <!-- ViewResolver -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 自定义参数绑定 -->
    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!-- 转换器 -->
        <property name="converters">
            <set>
                <!-- 日期类型转换 这里可以添加多种类型转换 -->
                <bean class="com.springapp.mvc.converter.DateConverter"/>
            </set>
        </property>
    </bean>

    <!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>


    <!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找 -->
                <!--suppress SpringModelInspection -->
                <value>classpath:CustomValidationMessage</value>
            </list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>
</beans>
